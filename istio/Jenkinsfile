pipeline {
    agent any

    parameters {
        choice(choices: ['option', 'namespace_create', 'namespace_delete', 'helm_upgrade', 'helm_uninstall'], name: 'DEPLOY_TYPE', description: '배포 타입 선택')
        choice(choices: ['option', 'istio-istiod', 'istio-base', 'istio-gateway'], name: 'TARGET_ISTIO', description: 'Istio 대상 선택')
    }

    environment {
        INSTALL_PATH = 'istio'
    }

    stages {
        stage('manage namespace') {
            steps {
                script{
                    if (params.DEPLOY_TYPE == "namespace_create") {
                        sh "kubectl apply -f ./${INSTALL_PATH}/kubectl/namespace.yaml "
                    } else if (params.DEPLOY_TYPE == "namespace_delete") {
                        sh "kubectl delete -f ./${INSTALL_PATH}/kubectl/namespace.yaml "
                    } else {
                        echo "skip namespace"
                    }
                }
            }
        }

        stage('deploy istio') {
            steps {
                script{
                    if (params.DEPLOY_TYPE == "helm_upgrade") {
                        HELM_DEPLOY_COMMAND =  "helm upgrade ${params.TARGET_ISTIO} ./${INSTALL_PATH}/helm/${params.TARGET_ISTIO} " +
                            " -f ./${INSTALL_PATH}/helm/${params.TARGET_ISTIO}/values-dev.yaml" +
                            " -n istio-system --install " + 
                            " --wait --timeout=10m "   // 최대 10분으로 설정

                        sh "eval ${HELM_DEPLOY_COMMAND}"

                    } else if (params.DEPLOY_TYPE == "helm_uninstall") {
                        sh "helm uninstall ${params.TARGET_ISTIO} -n istio-system "
                    } else {
                        echo "skip deploy"
                    }
                }
            }
        }
    }
}